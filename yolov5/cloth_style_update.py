import numpy as np
import cv2,sys
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import math

# '빨강':{'원색1 빨강','원색2 빨강','원색2 다홍2'} # 3
# '와인':{'진한 빨강','진한 다홍1','진한 주황1','진한 핑크','검은빛 핑크','진한 다홍2'} # 6
# '핑크':{'연한1 빨강','연한1 핑크','원색1 핑크','연한1 다홍2'} # 4
# '다홍':{'연한2 빨강','원색1 다홍1','원색2 다홍1','원색1 다홍2','연한2 다홍2'} # 5
# '주황':{'연한1 다홍1','원색1 주황1','원색 주황2'} # 3
# '브라운':{'회빛 빨강',#벽돌색
#           '회빛 다홍1', # 어두운 브라운
#           '원색2 주황1','회빛 주황1','연한2 주황1','진한 주황2','연한2 다홍1'} # 7
# '베이지':{'연한1 주황2','연한1 라임','연한2 주황2','연한1 주황1'} # 4
# '노랑':{'원색1 노랑','연한1 노랑'} # 2
# '라임':{'원색1 라임'} # 1
# '연두':{'원색1 연두','연한1 연두','연한1 녹색1'} # 3
# '카키':{'원색2 주황2','회빛 주황2','검은빛 노랑','원색2 노랑','진한 노랑',
#         '회빛 노랑','연한2 노랑','검은빛 라임','진한 라임','회빛 라임','원색2 라임',
#         '연한2 라임','회빛 연두','연한2 연두','회빛 녹색1','연한2 녹색1'} # 16
# '초록':{'진한 연두','원색2 연두','원색1 녹색1','원색2 녹색1','진한 녹색1','검은빛 녹색1',
#         '원색2 녹색2','진한 녹색2','회빛 녹색2','검은빛 녹색2','진한 옥색','회빛 옥색',
#         '검은빛 옥색'} # 13
# '민트':{'연한1 녹색2','연한2 녹색2','원색1 녹색2','연한1 옥색','연한2 옥색'} # 피스타치오도 존재함 # 5
# '옥색':{'원색1 옥색','원색2 옥색'} # 2
# '하늘':{'원색1 하늘','연한1 하늘','연한2 하늘','연한1 파랑'} # 4
# '바다':{'원색2 하늘','진한 하늘','회빛 하늘','검은빛 하늘','연한2 파랑','회빛 파랑'} # 6
# '파랑':{'원색1 파랑',#코발트 블루색
#         '원색2 파랑','원색1 진파랑','원색1 보라1'} # 4
# '남색':{'검은빛 파랑','진한 파랑','원색2 진파랑','진한 진파랑','회빛 진파랑',
#         '원색2 보라1','진한 보라1'} # 7
# '보라':{'연한1 진파랑','연한2 진파랑','연한1 보라1','연한2 보라1','회빛 보라1',
#         '원색1 보라2','연한1 보라2','연한2 보라2','원색2 보라2','회빛 보라2',
#         '진한 보라2','진한 마젠타','회빛 마젠타','회빛 핑크','회빛 다홍2','연한2 핑크'} # 16
# '마젠타':{'원색1 마젠타','연한1 마젠타'.'원색2 마젠타','연한2 마젠타','원색2 핑크'} # 5
# '검정빛':{'검은빛 빨강','검은빛 다홍1','검은빛 주황1','검은빛 주황2','검은빛 연두',
#           '검은빛 진파랑','검은빛 보라1','검은빛 보라2','검은빛 마젠타','검은빛 다홍2'} # 다 검은빛으로 들어갈 예정 # 10
# '하양':{'하양'} # 1
# '검정':{'검정'} # 1
# '회색':{'회색'} # 1
    
dict_color = {'원색1 빨강':'빨강', '원색2 빨강':'빨강', '원색2 다홍2':'빨강',
              '진한 빨강':'와인', '진한 다홍1':'와인', '진한 주황1':'와인', '진한 핑크':'와인', '검은빛 핑크':'와인', '진한 다홍2':'와인',
              '연한1 빨강':'핑크','연한1 핑크':'핑크','원색1 핑크':'핑크','연한1 다홍2':'핑크',
              '연한2 빨강':'다홍','원색1 다홍1':'다홍','원색2 다홍1':'다홍','원색1 다홍2':'다홍','연한2 다홍2':'다홍',
              '연한1 다홍1':'주황','원색1 주황1':'주황','원색 주황2':'주황',
              '회빛 빨강':'브라운','회빛 다홍1':'브라운','원색2 주황1':'브라운','회빛 주황1':'브라운','연한2 주황1':'브라운','진한 주황2':'브라운','연한2 다홍1':'브라운',
              '연한1 주황2':'베이지','연한1 라임':'베이지','연한2 주황2':'베이지','연한1 주황1':'베이지',
              '원색1 노랑':'노랑','연한1 노랑':'노랑',
              '원색1 라임':'라임',
              '원색1 연두':'연두','연한1 연두':'연두','연한1 녹색1':'연두',
              '원색2 주황2':'카키','회빛 주황2':'카키','검은빛 노랑':'카키','원색2 노랑':'카키','진한 노랑':'카키','회빛 노랑':'카키','연한2 노랑':'카키','검은빛 라임':'카키','진한 라임':'카키','회빛 라임':'카키','원색2 라임':'카키','연한2 라임':'카키','회빛 연두':'카키','연한2 연두':'카키','회빛 녹색1':'카키','연한2 녹색1':'카키',
              '진한 연두':'초록','원색2 연두':'초록','원색1 녹색1':'초록','원색2 녹색1':'초록','진한 녹색1':'초록','검은빛 녹색1':'초록','원색2 녹색2':'초록','진한 녹색2':'초록','회빛 녹색2':'초록','검은빛 녹색2':'초록','진한 옥색':'초록','회빛 옥색':'초록','검은빛 옥색':'초록',
              '연한1 녹색2':'민트','연한2 녹색2':'민트','원색1 녹색2':'민트','연한1 옥색':'민트','연한2 옥색':'민트',
              '원색1 옥색':'옥색','원색2 옥색':'옥색',
              '원색1 하늘':'하늘','연한1 하늘':'하늘','연한2 하늘':'하늘','연한1 파랑':'하늘',
              '원색2 하늘':'바다','진한 하늘':'바다','회빛 하늘':'바다','검은빛 하늘':'바다','연한2 파랑':'바다','회빛 파랑':'바다',
              '원색1 파랑':'파랑','원색2 파랑':'파랑','원색1 진파랑':'파랑','원색1 보라1':'파랑',
              '검은빛 파랑':'남색','진한 파랑':'남색','원색2 진파랑':'남색','진한 진파랑':'남색','회빛 진파랑':'남색','원색2 보라1':'남색','진한 보라1':'남색',
              '연한1 진파랑':'보라','연한2 진파랑':'보라','연한1 보라1':'보라','연한2 보라1':'보라','회빛 보라1':'보라','원색1 보라2':'보라','연한1 보라2':'보라','연한2 보라2':'보라','원색2 보라2':'보라','회빛 보라2':'보라','진한 보라2':'보라','진한 마젠타':'보라','회빛 마젠타':'보라','회빛 핑크':'보라','회빛 다홍2':'보라','연한2 핑크':'보라',
              '원색1 마젠타':'마젠타','연한1 마젠타':'마젠타','원색2 마젠타':'마젠타','연한2 마젠타':'마젠타','원색2 핑크':'마젠타',
              '검은빛 빨강':'검정빛','검은빛 다홍1':'검정빛','검은빛 주황1':'검정빛','검은빛 주황2':'검정빛','검은빛 연두':'검정빛','검은빛 진파랑':'검정빛','검은빛 보라1':'검정빛','검은빛 보라2':'검정빛','검은빛 마젠타':'검정빛','검은빛 다홍2':'검정빛',
              '하양':'하양',
              '검정':'검정',
              '회색':'회색'
             }
              


def rgb2hsv(r,g,b):
    max_c = max(r,g, b)
    min_c = min(r,g, b)
    delta = max_c - min_c

    v =  (max_c/255) * 100
    if v == 0.0:
        s = 0.0
        h = 0.0
    else:
        if max_c == 0: 
            s =0.0
        else:
            s = (delta/max_c) * 100
        if s == 0.0:
            h = 0.0
        else:
            if max_c == r:
                h = 60.0 * ((g-b)/delta)
#                 h = 60.0 * ((g-b) % 6)
            elif max_c == g:
                h = 60.0 * (2.0+(b-r)/delta)
            elif max_c == b:
    #             h = 60.0 * (4.0+(b-r)/delta)
                h = 60.0 * (4.0+(r-g)/delta)
            if h < 0:
                h += 360.0

    return h,s,v

def centroid_histogram(clt): # 색상 비율계산
    # grab the number of different clusters and create a histogram
    # based on the number of pixels assigned to each cluster
    numLabels = np.arange(0, len(np.unique(clt.labels_)) + 1)
    (hist, _) = np.histogram(clt.labels_, bins=numLabels)
    

    # normalize the histogram, such that it sums to one
    hist = hist.astype("float")
    hist /= hist.sum()

    # return the histogram
    return hist

def extract_color(key, value):
    xyxy = value[1]
    xmin = int(xyxy[0])
    ymin = int(xyxy[1])
    xmax = int(xyxy[2])
    ymax = int(xyxy[3])

    center_x = int((xyxy[0] + xyxy[2]) / 2)
    center_y = int((xyxy[1] + xyxy[3]) / 2)
    w = int(xyxy[2] - xyxy[0])
    h = int(xyxy[3] - xyxy[1])
    #len = max(w, h)
    image = cv2.imread(key)
    img_trim = image[ymin:ymax, xmin:xmax]
    # mask = np.zeros(img_trim.shape[:2], np.uint8) # 마스크
    # bgdModel = np.zeros((1, 65), np.float64) # 배경 모델 무조건 1행 65열, float64
    # fgdModel = np.zeros((1, 65), np.float64) # 전경 모델 무조건 1행 65열, float64
    # rc = (0,0,w-1,h-1)
    # print(rc)
    # # RECT는 사용자가 사각형 지정. 이 값에서 계속 업데이트
    # cv2.grabCut(img_trim, mask, rc, bgdModel, fgdModel, 1, cv2.GC_INIT_WITH_RECT)
    # # mask 4개 값을 2개로 변환
    # mask = np.where((mask == 0) | (mask == 2), 0, 1).astype('uint8')
    # dst = img_trim * mask[:, :, np.newaxis]
    # dst = cv2.cvtColor(dst, cv2.COLOR_BGR2RGB) # 색 그 부분만 추출 이미지
    s_detect = image[center_y - 5 : center_y + 5, center_x - 5 : center_x + 5]
    test_image = cv2.cvtColor(img_trim, cv2.COLOR_BGR2RGB) #화면에 보이는 잘린 이미지
    select_img = cv2.cvtColor(s_detect, cv2.COLOR_BGR2RGB) #색상추출
    sample_image = select_img.reshape((select_img.shape[0] * select_img.shape[1], 3)) # height, width 통합

    k = 1 # 예제는 5개로 나누겠습니다
    clt = KMeans(n_clusters = k)
    clt.fit(sample_image)
    
    
    three_color=[]
    color=[]
    for center in clt.cluster_centers_:
        color=list(center)
        three_color.append(color)
    
    
    hist = centroid_histogram(clt)  #각 클러스터(?)의 빈도수 찾기
    hist = list(hist)
    
    
    maxindex = np.argmax(hist) # 값이 큰 것의 인덱스 가져오기
    color=three_color[maxindex]

    r=int(color[0])
    g=int(color[1])
    b=int(color[2])
    
    
    h,s,v = rgb2hsv(r,g,b)

    flag = 0
    if v>=0 and v<=20:
        c_txt='검정'
        flag = 1
    else:
        if s>=0 and s<=8:
            if v>=92 and v<=100:
                c_txt='하양'
                flag = 1
            else:
                c_txt='회색'
                flag = 1
        elif s <= 10 and v <= 90:
            c_txt='회색'
            flag = 1
        elif s <= 13 and v <= 60:
            c_txt='회색'
            flag = 1
                
    if flag == 0:
        if h <= 180 or h > 350:
            if h <= 10 or h > 350: # 색상결정
                c_txt='빨강'
            elif h <= 15:
                c_txt='다홍1'
            elif h <= 30:
                c_txt='주황1'
            elif h <= 40:
                c_txt='주황2' 
            elif h <= 60:
                c_txt='노랑' 
            elif h <= 70:
                c_txt='라임' 
            elif h <= 90:
                c_txt='연두'
            elif h <= 130:
                c_txt='녹색1'
            elif h <= 155:
                c_txt='녹색2'
            elif h <= 180:
                c_txt='옥색'
        else:
            if h <= 200:
                c_txt='하늘'
            elif h <= 220:
                c_txt='파랑'
            elif h <= 240:
                c_txt='진파랑'
            elif h <= 250:
                c_txt='보라1'
            elif h <= 280:
                c_txt='보라2'
            elif h <= 310:
                c_txt='마젠타'
            elif h <= 330:
                c_txt='핑크'
            elif h <= 350:
                c_txt='다홍2'
        
        if s <= 50:
            if v <= 40:
                prop = '검은빛'
            elif v <= 60:
                prop = '회빛'
            elif v <= 90:
                prop = '연한2'
            elif v <= 100:
                prop = '연한1'
        elif s <= 100:
            if v <= 40:
                prop = '검은빛'
            elif v <= 60:
                prop = '진한'
            elif v <= 90:
                prop = '원색2'
            elif v <= 100:
                prop = '원색1'
        
        c_txt = f'{prop} {c_txt}'
    
    color_txt = dict_color[c_txt]
        
    return color_txt, test_image